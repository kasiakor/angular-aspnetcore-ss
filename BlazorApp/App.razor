@inject HttpClient Http
@*The IJSRuntime abstraction is asynchronous to allow for Blazor Server scenarios. If the app is a Blazor WebAssembly app and you want to invoke a JavaScript function synchronously, downcast to IJSInProcessRuntime and call Invoke*@
@inject IJSRuntime JSRuntime

<div class="p-2 bg-info text-white">
    <EditForm Model="@search" OnValidSubmit="@HandleSearch" class="form-inline">
        <InputText class="form-control" @bind-Value="@search.searchTerm"
                   placeholder="Enter search term" />
        <button type="submit" class="btn btn-primary m-1">Search</button>
        <span class="ml-3">@results</span>
    </EditForm>
</div>

@code {
    //static readonly string productsUrl = "/api/products";
    SearchSettings search = new SearchSettings();
    string results = "No results to display";

    //create wrapper object in blazor to  provide angular with the object to use
     protected override void OnAfterRender(bool firstRender) {
        JSRuntime.InvokeAsync<object>("angular_receiveReference", 
            DotNetObjectReference.Create(this));  
    }

    async void HandleSearch()
    {
        if (search.searchTerm != String.Empty)
        {
            //Product[] prods =
            //    await Http.GetJsonAsync<Product[]>
            //    ($"{productsUrl}/?search={search.searchTerm}");
            Product[] prods =
                await JSRuntime.InvokeAsync<Product[]>
                ("angular_searchProducts", search.searchTerm);
            //blazor component receives the product objects from the angular object without duplicationg http requests 

            decimal totalPrice = prods.Select(p => p.Price).Sum();
            results = $"{ prods.Length } products, total price is ${ totalPrice }";
            StateHasChanged();
        }
    }

    class Product
    {
        public decimal Price { get; set; }
    }

    class SearchSettings
    {
        public string searchTerm;
    }
}
